package com.uproject.library.ums.controller;


import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import com.uproject.library.ums.domain.exception.UException;
import com.uproject.library.ums.domain.exception.UValidatorException;
import com.uproject.library.ums.domain.response.UHandlerResponse;
import com.uproject.library.ums.domain.response.UValidatorResponse;
import com.uproject.library.ums.domain.util.ErrorCode;
/**
 * Class for handling exception generated by Spring RestController.
 * 
 * @author Wilever Gomez [wilevergomez@gmail.com]
 */
@ControllerAdvice
public class UHandlerController extends ResponseEntityExceptionHandler {
	
	/**
	 * HttpStatus of response.
	 */
	private HttpStatus status;
	/**
	 * Header of response. It have ExceptionName and ExceptionMessage.
	 */
	private HttpHeaders header = new HttpHeaders();
	/**
	 * Name of exception,
	 */
	private String nameException;
	/**
	 * Error code of request.
	 */
	private ErrorCode errorCode;
	/**
	 * Generate responses for any class that extends from Exception.
	 * By default HttpStatus Code is 400 - BAD_REQUEST.
	 * <p>It generate a headers with: <ul>
	 * <li> ExceptionName: Name of exception caught.
	 * <li> ExceptionMessage: Message of exception caught.
	 * 
	 * @param exception {@link Exception}
	 * @return {@link UHandlerResponse}
	 */
	@ExceptionHandler(Exception.class)
    public ResponseEntity<UHandlerResponse> Default(
    		final Exception exception) {
		nameException = String.valueOf(exception.getClass().getSimpleName());
		header.add("ExceptionName", nameException);
		header.add("ExceptionMessage", exception.getMessage());
		switch (nameException) {
			case "NotFoundException":
				errorCode = ErrorCode.NOT_FOUND;
				status= HttpStatus.NOT_FOUND;
				break;
			case "AccessDeniedException":
				errorCode = ErrorCode.UNAUTHORIZED;
				status= HttpStatus.UNAUTHORIZED;
				break;
			case "IllegalAccessException":
				errorCode = ErrorCode.FORBIDDEN;
				status= HttpStatus.FORBIDDEN;
				break;
			default:
				errorCode= ErrorCode.BAD_REQUEST;
				status= HttpStatus.BAD_REQUEST;
				break;
		}
		return getResponse(
				errorCode.getCode(), 
				errorCode.getMessage(),
				header,
				status);
	}
	/**
	 * Generate responses for KException.
	 * HttpStatus Code is 400 - BAD_REQUEST.
	 * 
	 * @param exception Exception called
	 * @return {@link UHandlerResponse}
	 */
	@ExceptionHandler(UException.class)
    public ResponseEntity<UHandlerResponse> kException(
    		final UException exception) {
		
		switch (exception.getErrorCode()) {
		case PK_NOT_AVAILABLE:
			status = HttpStatus.CONFLICT;
			break;
		case DATA_ACTIVE:
			status = HttpStatus.CONFLICT;
			break;
		case DATA_NOT_ACTIVE:
			status = HttpStatus.CONFLICT;
			break;
		default:
			status = HttpStatus.BAD_REQUEST;
			break;
		}
		return 	getResponse(
				exception.getCode(), 
				exception.getMessage(),
				null, 
				status);
	}
	/**
	 * Generate responses for KValidatorException.
	 * HttpStatus Code is 400 - BAD_REQUEST.
	 * 
	 * @param exception Exception called
	 * @return {@link UValidatorResponse}
	 */
	@ExceptionHandler(UValidatorException.class)
    public ResponseEntity<UValidatorResponse> kEValidator(
    		final UValidatorException exception) {
		return 	new ResponseEntity<>(
					new UValidatorResponse(
							exception.getCode(), 
							exception.getMessage(),
							exception.getMessageList()),
					null, 
					HttpStatus.FAILED_DEPENDENCY);
	}
	/**
	 * Generate responses by default.
	 * HttpStatus Code is 400 - BAD_REQUEST.
	 * 
	 * @param code Code error, +info: {@link ErrorCode#getCode()} 
	 * @param message Message by default for error, +info: {@link ErrorCode#getMessage()}
	 * @param headers Headers of response
	 * @param status {@link HttpStatus}
	 * @return {@link UHandlerResponse}
	 */
	private ResponseEntity<UHandlerResponse> getResponse(
			final String code,
			final String message,
			final HttpHeaders headers,
			final HttpStatus status){
		return new ResponseEntity<>(
					new UHandlerResponse(
							code, 
							message), 
				headers, 
				status);
	}
}
